- content_for :head do
  = javascript_pack_tag 'form'

:ruby
  initialData = {
    article: ArticleBlueprint.render_as_json(@article),
    allTags: TagBlueprint.render_as_json(Tag.all),
  }.to_json

:css
  .comment { border: 1px solid gray; }
  .sortable-ghost { opacity: 0.1; }
  .sortable-drag { border: 3px solid red !important; opacity: 1; }

-# el: #formなので、これがvueコンポーネントのtemplate
#form{ data: { init: initialData }, style: 'display: flex; flex-flow: row ;' }
  -# Railsのname生成がほしいがために、悲しいかな、コイツはHAMLで書かざるを得ない。
  -# あくまで、「RailsのFormを活かす前提で無理やりvue.jsで動的にしてみた」という前後関係である。
  = form_with(model: article, local: true, html: { style: 'width: 40%;' }) do |form|
    - if article.errors.any?
      #error_explanation
        %h2
          = pluralize(article.errors.count, "error")
          prohibited this article from being saved:
        %ul
          - article.errors.full_messages.each do |message|
            %li= message
    .field
      -# nested formを使わなければ、特別な手段を用いなくてもv-modelとかは動く。v-bindは動く。
      = form.label :title
      = form.text_field :title, 'v-model': 'article.title', ':style': '{ backgroundColor: article.title ? "" : "#fcc" }'

    .field
      = form.label :body
      = form.text_area :body, 'v-model': 'article.body'

    .field
      %ul
        = form.collection_check_boxes :tag_ids, Tag.all, :id, :name, include_hidden: false do |b|
          %li
            = b.check_box vue: true, 'v-model': 'tag_ids'
            = b.label vue: true

    .field
      %ul
        = form.fields_for :taggings, [Tagging.new], child_index: '${index}' do |tagging_f|
          %ul
            %li{ 'v-for': '(tagging, index) in article.taggings'}
              = tagging_f.hidden_field :id, vue: true, 'v-model': 'tagging.id'
              = tagging_f.select :tag_id, nil, {}, {vue: true, 'v-model': 'tagging.tag_id'} do
                %option{'v-if': 'tagging.tag_id', ':value': 'tagging.tag_id'}
                  {{findTag(tagging.tag_id).name}} (current)
                %option{'v-for': 'tag in availableTags', ':value': 'tag.id'}
                  {{tag.name}}
              %label{'v-if': 'tagging.id'}
                = tagging_f.check_box :_destroy, {vue: true, 'v-model': 'tagging._destroy'}, 1, nil
                解除
              %template{'v-else': true, style: 'display:inline-block;'}
                %button{type: :button, '@click': 'article.taggings.splice(index, 1)'} 追加をやめる
        %button{ type: 'button', '@click': 'article.taggings.push({ id: null, tag_id: null, _destroy: false })' } add

    .field
      = form.label :visibility
      = form.collection_radio_buttons :visibility, Article.visibility.options, :last, :first do |b|
        = b.label do
          -# collection_radio_buttonsで生成されるinput要素にhtmlオプションを与えるならこうするしかない。(vuejs関係なく)
          = b.radio_button 'v-model': 'article.visibility'
          = b.text
    .filed
      -# has_one_attachedの場合
      = form.text_field :image, vue: %i[id name value], value: '', ':value': 'article.image?.signed_id'
      %template{ 'v-if': "article.image?.signed_id" }
        %img{ width: '100px', ':src': rails_service_blob_path(signed_id: 'XXXXXXXX', filename: 'abc').gsub('XXXXXXXX', '${article.image.signed_id}').yield_self{|x| "\`#{x}\`"} }
        %button{ type: :button, '@click': 'article.image.signed_id = null' } 消す

      %direct-upload{ 'upload-url': rails_direct_uploads_url, '@upload': 'article.image = { signed_id: $event.blob.signed_id }' }
        %button{ type: :button } アップロード

    -# 普通の Vue-Component
    %draggable{ 'v-model': 'article.comments', '@end': 'updateSortKey' }

      -# 普通の v-for 表記 + v-bind表記
      .comment.fields{ 'v-for': '(comment, comment_index) in article.comments', 'v-show': '!comment._destroy' }

        -# [Comment.new]: 通常であれば要素が1つもなければformを出力しないで良いが
        -#                vueから扱うなら、どのような状況でも1つだけ要素を出力させなければならない
        -# child_index: コレ自体はRailsの機能だが、コイツを利用して、各input要素が v-for の comment_index を参照するようにセットアップする
        -# wrapper: wrapperを外すのはお好み。無駄な構造を作りたくなければ外す。
        = form.fields_for :comments, [Comment.new], child_index: '${comment_index}', wrapper: false do |comment_form|

          .field
            -# vue: Railsが内部で自動出力するカラムを、出力の最終段直前でv-bindに置換することで、vue.jsから扱えるようにする。
            -#      具体的には、key="value" を v-bind:key="`value`"に置き換える。
            -#      backquote-stringなのに注意。すなわちvalueに${x}記法が含まれていればvue.js側で評価される。
            -#      fields_forのindex指定によって、for="article[comments_attributes][${comment_index}][name]"が入っているので、
            -#      これが置換されて、v-bind:for="`article[comments_attributes][${comment_index}][name]`" となる。(backquote-stringであるのに注意！)
            = comment_form.label :name, vue: :for
            -#      ↑ ちなみに、forとidは一致していないといけない。故に、labelにはvue: :for を input等にはvue: :idを指定することになる
            -#      (labelでinputを包むときはどちらでも良い)

            -# vue: nameを含むことで、Railsが受け取るparamsに${content_index}を紛れ込ませ、Vuejsの力で動的に展開する
            = comment_form.text_field :name, vue: %i[id name], 'v-model': 'comment.name'

          .field
            -# 多分 Railsが自動生成するような対象はid / name / value / forだけでしょ？という予断から、vue: trueを渡すとこれらを一括して対象にすることができるようにした。
            -# もしかしたらいまいちかもしれない。
            = comment_form.label :body, vue: true

            -# vue: だからRailsのメカニズムを利用しないオプション(この例ではstyle)であれば、単に ':style'とすれば良い。
            -#      問題となるのは、概ね id / name / value / for だけだろう。
            = comment_form.text_area :body, vue: true, 'v-model': 'comment.body'
          -# nestedな状態でのradio_button
          .field
            = comment_form.label :visibility, vue: true
            -# include_hidden: falseにしておかないと、そちらで生成されたinputにはvue: オプションが無いためうまく動かない
            = comment_form.collection_radio_buttons :visibility, Comment.visibility.options, :last, :first, include_hidden: false do |b|
              = b.radio_button vue: true, 'v-model': 'comment.visibility'
              -# forとidの対応がつく。
              = b.label vue: true

          .filed
            = comment_form.label :sort_key, vue: true
            = comment_form.text_field :sort_key, vue: true, ':value': 'comment.sort_key'

          .field
            -# allow_destroy: trueを動かすためのいつもの組み合わせ。
            = comment_form.hidden_field :id, vue: %i[id name], 'v-model': 'comment.id'
            = comment_form.hidden_field :_destroy, vue: %i[id name], 'v-model': 'comment._destroy'

            -# Railsが自動生成する値を使わないなら、vue:の指定は不要
            = button_tag '削除', type: :button, '@click': 'delComment(comment)'

          .filed
            -# has_many_attachedな場合
            %template{ 'v-if': 'comment.images.length === 0' }
              = comment_form.hidden_field :images, value: nil, multiple: true, vue: %i[id name]
            %ul{ style: 'display: flex; flex-flow: raw' }
              %li{ 'v-for': "(image, image_index) in comment.images", ':key': "image_index",
                style: 'display: flex-item; list-style: none;'}
                %img{ width: '100px', ':src': rails_service_blob_path(signed_id: 'XXXXXXXX', filename: 'abc').gsub('XXXXXXXX', '${image.signed_id}').yield_self{|x| "\`#{x}\`"} }
                %br
                = comment_form.hidden_field :images, value: nil, multiple: true, vue: %i[id name value], ':value': 'image.signed_id'
                %button{ type: :button, '@click': 'comment.images.splice(image_index, 1)' } やめる

            %direct-upload{ 'upload-url': rails_direct_uploads_url,
                            ':attachments': 'comment.images',
                            multiple: true,
                            '@upload': 'comment.images.push({ signed_id: $event.blob.signed_id })',
                            '@fail': 'alert("アップロード失敗")',
                          }
              %button{ type: :button } 新規画像

    = button_tag 'add comment', type: 'button', '@click': 'addComment'

    .actions
      = form.submit

  %pre{ style: 'width: 40%;'}
    {{article}}
